BRANCH_SYNC_LABEL='sync'
BRANCH_SYNC_AHEAD_LABEL='ahead:'
BRANCH_SYNC_BEHIND_LABEL='behind:'

STAGED_FILES_LABEL='staged:'
TRACKED_NOT_STAGED_FILES_LABEL='modified:'
UNTRACKED_FILES_LABEL='untracked:'

function dynamic_prompt {
  local BLACK="\[\033[0;30m\]"
  local BLACK_BOLD="\[\033[1;30m\]"
  local RED="\[\033[0;31m\]"
  local RED_BOLD="\[\033[1;31m\]"
  local GREEN="\[\033[0;32m\]"
  local GREEN_BOLD="\[\033[1;32m\]"
  local YELLOW="\[\033[0;33m\]"
  local YELLOW_BOLD="\[\033[1;33m\]"
  local BLUE="\[\033[0;34m\]"
  local BLUE_BOLD="\[\033[1;34m\]"
  local PURPLE="\[\033[0;35m\]"
  local PURPLE_BOLD="\[\033[1;35m\]"
  local CYAN="\[\033[0;36m\]"
  local CYAN_BOLD="\[\033[1;36m\]"
  local WHITE="\[\033[0;37m\]"
  local WHITE_BOLD="\[\033[1;37m\]"
  local RESET_COLOR="\[\e[00m\]"

  local RED_LIGHT_BOLD="\[\033[1;91m\]"
  local GREEN_LIGHT_BOLD="\[\033[1;92m\]"

  DEFAULT_PS1="\n\u@\h:\W "

  local GIT_PS=`__git_ps_custom`
  local VENV_PS=`__virtualenv_ps_custom`
  local RBENV_PS=`__rbenv_ps_custom`
  local PYENV_PS=`__pyenv_ps_custom`

  PS1="${PYENV_PS}${RBENV_PS}${VENV_PS}${GIT_PS}${DEFAULT_PS1}"
  [ "$DEFAULT_PS1" != "$PS1" ] && PS1="\n---${PS1}"

  export CURRENT_REPO_NAME=`__git_repo_name`
  export PS1="${PS1}\$ "
}

function __is_in_git_repo()
{
  git rev-parse --is-inside-work-tree &>/dev/null;
  echo "${?}"
}

function __git_repo_name()
{
  if [ ! -z $(git config remote.origin.url) ]; then
    echo `git config remote.origin.url | cut -d\: -f2 | sed -e 's/\.git//'`
  else
    echo local
  fi
}

function __git_ps_custom() {
  if [ `__is_in_git_repo` == '0' ]; then
    #local BRANCH="`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`"
    local BRANCH="`git rev-parse --abbrev-ref HEAD`"

    local REPO_NAME=`__git_repo_name`

    local COLOR=''
    case $BRANCH in
      master)
        COLOR=$RED_LIGHT_BOLD
        ;;
      production)
        COLOR=$YELLOW_BOLD
        ;;
      staging)
        COLOR=$CYAN_BOLD
        ;;
      *)
        COLOR=$GREEN_LIGHT_BOLD
        ;;
    esac

    local BRANCH_SYNC_STATUS
    if [[ `git branch -a | grep "remotes/origin/${BRANCH}" | wc -l` -gt 0 ]]; then
      local COMMITS_AHEAD=`git rev-list --count origin/${BRANCH}..${BRANCH}`
      local COMMITS_BEHIND=`git rev-list --count ${BRANCH}..origin/${BRANCH}`

      local IS_AHEAD=0
      [ $COMMITS_AHEAD -gt 0 ] && IS_AHEAD=1
      local IS_BEHIND=0
      [ $COMMITS_BEHIND -gt 0 ] && IS_BEHIND=1

      local IS_DIVERGED=0
      [[ $IS_AHEAD -eq 1 && $IS_BEHIND -eq 1 ]] && IS_DIVERGED=1

      if [ $IS_DIVERGED -eq 1 ]; then
        BRANCH_SYNC_STATUS="(${PURPLE_BOLD}${BRANCH_SYNC_LABEL}"
        BRANCH_SYNC_STATUS="${BRANCH_SYNC_STATUS}${RESET_COLOR}|${GREEN_BOLD}${BRANCH_SYNC_AHEAD_LABEL}${COMMITS_AHEAD}${RESET_COLOR}"
        BRANCH_SYNC_STATUS="${BRANCH_SYNC_STATUS}|${RED_BOLD}${BRANCH_SYNC_BEHIND_LABEL}${COMMITS_BEHIND}${RESET_COLOR}) "
      else
        [ $IS_AHEAD -eq 1 ] && BRANCH_SYNC_STATUS="(${GREEN_BOLD}${BRANCH_SYNC_AHEAD_LABEL}${COMMITS_AHEAD}${RESET_COLOR}) "
        [ $IS_BEHIND -eq 1 ] && BRANCH_SYNC_STATUS="(${RED_BOLD}${BRANCH_SYNC_BEHIND_LABEL}${COMMITS_BEHIND}${RESET_COLOR}) "
      fi
    else
      BRANCH_SYNC_STATUS="(${BLUE_BOLD}no-remote${RESET_COLOR}) "
    fi

    local BRANCH_STAGING_STATUS
    local STAGED_FILES_COUNT=`git diff --staged --name-only | wc -l | tr -d '[:space:]'`
    if [ $STAGED_FILES_COUNT -gt 0 ]; then
      BRANCH_STAGING_STATUS="${GREEN}${STAGED_FILES_LABEL}${STAGED_FILES_COUNT}${RESET_COLOR}"
    fi

    local BRANCH_TRACKED_NOT_STAGED_STATUS
    local TRACKED_NOT_STAGED_FILES_COUNT=`git ls-files . --modified | wc -l | tr -d '[:space:]'`
    if [ $TRACKED_NOT_STAGED_FILES_COUNT -gt 0 ]; then
      BRANCH_TRACKED_NOT_STAGED_STATUS="${YELLOW}${TRACKED_NOT_STAGED_FILES_LABEL}${TRACKED_NOT_STAGED_FILES_COUNT}${RESET_COLOR}"
    fi

    local BRANCH_UNTRACKED_STATUS
    local UNTRACKED_FILES_COUNT=`git ls-files . --exclude-standard --others | wc -l | tr -d '[:space:]'`
    if [ $UNTRACKED_FILES_COUNT -gt 0 ]; then
      BRANCH_UNTRACKED_STATUS="${BLACK_BOLD}${UNTRACKED_FILES_LABEL}${UNTRACKED_FILES_COUNT}${RESET_COLOR}"
    fi

    local BRANCH_STATUS
    if [ ! -z "$BRANCH_STAGING_STATUS" ]; then
      BRANCH_STATUS=$BRANCH_STAGING_STATUS
    fi
    if [ ! -z "$BRANCH_TRACKED_NOT_STAGED_STATUS" ]; then
      [ ! -z "$BRANCH_STATUS" ] && BRANCH_STATUS="${BRANCH_STATUS}|"
      BRANCH_STATUS="${BRANCH_STATUS}${BRANCH_TRACKED_NOT_STAGED_STATUS}"
    fi
    if [ ! -z "$BRANCH_UNTRACKED_STATUS" ]; then
      [ ! -z "$BRANCH_STATUS" ] && BRANCH_STATUS="${BRANCH_STATUS}|"
      BRANCH_STATUS="${BRANCH_STATUS}${BRANCH_UNTRACKED_STATUS}"
    fi

    [ ! -z "$BRANCH_STATUS" ] && BRANCH_STATUS="|$BRANCH_STATUS| "

    # PS1="---${PS1}[${COLOR}${BRANCH}${RESET_COLOR}${WHITE_BOLD}@${REPO_NAME}${RESET_COLOR}]\n"
    echo " [${BRANCH_STATUS}${BRANCH_SYNC_STATUS}${COLOR}${BRANCH}${RESET_COLOR}${WHITE_BOLD}@${REPO_NAME}${RESET_COLOR}]"
  fi
}

function __rbenv_ps_custom() {
  if [[ `rbenv version 2>/dev/null | grep -c '.ruby-version'` -gt 0 ]]; then
    local RB_VERSION=`rbenv version-name 2>/dev/null`
    if [[ -z "$RB_VERSION" ]]; then
      RB_VERSION="`rbenv version-name 2>&1 | ggrep -oP '\d+\.\d+\.\d+'`-missing"
      [[ -z "$RB_VERSION" ]] && RB_VERSION='unknown'
    fi
    echo " (${YELLOW_BOLD}ruby_${RB_VERSION}${RESET_COLOR})"
  fi

}

function __virtualenv_ps_custom() {
  local VENV=''
  # Get Virtual Env
  if [[ -n "$VIRTUAL_ENV" ]]; then
      # Strip out the path and just leave the env name
      local VENV_PATH=$(shorten_path "`dirname ${VIRTUAL_ENV}`")

      VENV="${VIRTUAL_ENV##*/}"
      VENV="${VENV_PATH}${BLUE_BOLD}${VENV}${RESET_COLOR}"
  fi
  [[ -n "$VENV" ]] && echo " [python-venv:${VENV}]"
}

function __pyenv_ps_custom() {
  local PYTHON_VERSION
  if [[ ! -z "$VIRTUAL_ENV" ]]; then
    local PYTHON_VERSION=`${VIRTUAL_ENV}/bin/python --version | tr '[:upper:]' '[:lower:]'`
    PYENV_VERSION="${YELLOW_BOLD}venv-${PYTHON_VERSION//[[:space:]]/_}${RESET_COLOR}"
  elif [[ `pyenv version 2>&1 | grep -c '.python-version'` -gt 0 ]]; then
    PYTHON_VERSION=`pyenv version-name 2>/dev/null`
    if [ -z "$PYTHON_VERSION" ]; then
      PYTHON_VERSION="`pyenv local`-missing"
    fi
    PYENV_VERSION="${YELLOW_BOLD}python_${PYTHON_VERSION}${RESET_COLOR}"
  fi

  [[ -n $PYENV_VERSION ]] && echo " ($PYENV_VERSION)"
}

function shorten_path() {
  local CURRENT_PATH="$1"
  local PATH_NODE_CHARS=${2:-3}
  local SHORT_PATH=""
  if [[ ${CURRENT_PATH:0:1} =~ ^(~|\/).* ]]; then
    SHORT_PATH=${CURRENT_PATH:0:1}
    CURRENT_PATH=$(echo $CURRENT_PATH | cut -c 2-)
  fi

  for PATH_NODE in ${CURRENT_PATH//\// }; do
    SHORT_PATH="${SHORT_PATH}${PATH_NODE:0:$PATH_NODE_CHARS}/"
  done

  echo $SHORT_PATH
}

# disable the default virtualenv prompt change
export VIRTUAL_ENV_DISABLE_PROMPT=1
export PROMPT_COMMAND="dynamic_prompt"
